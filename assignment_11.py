# -*- coding: utf-8 -*-
"""Assignment #11

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HVtVG1XpOHzAocJi9kqmrkLrn7USWUiC

def for card deck dict
"""

def card_dicts():
  # define the types of suits in a card deck, innitialize in list:
  suits = ['Clubs', 'Diamonds', 'Hearts', 'Spades']
  # Define the number of cards (values) in the card deck, innitialize in list:
  values = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'Jack', 'Queen', 'King', 'Ace']

  # Dict for {Suit: {Value: {}}}.....
  # suit_values = 1. suit, value: {} for val in vals(will put the 'values' here, then for suit in suits (will put the suits from 'suits' list))
  suit_values = {suit: {value: {} for value in values} for suit in suits}
  # Create the second dictionary: {Value: {Suit: {}}}
  # same schema, pulling from the lists that are defined above using 'for'
  values_suits = {value: {suit: {} for suit in suits} for value in values}

  # to display both of the dictionaries:
  print("Here are the specified dictionaries: ")
  print("______________________________________________")
  print("Suit to Values: ")
  print(suit_values)
  print("______________________________________________")
  print("Values to suits: ")
  print(values_suits)
  print("______________________________________________")

"""Def for RNA codons"""

# SETS OF THREE RNA = CODON
# 1. slice code into sets of three
# for i in range (0, len(genetic_code) 3) =  STEP 3 and INCLUDE 0 (1)
# then, codon = [1:1+3] = start at 0, then 1, 2, 3 slice
# make sure it has a length of three, or else it's not complete.
# if else to add it to list of codons

# amino_acid = protein ??? I think.
# AUTOMATICALLY print the protein sequence, then ask optional arguments

# LENGTH:
# len(protein)
# COMMONLY OCCURING:
# from codon_table, common_codon = max(codon_count) = max number of times a specific codon appears, then, to find how many times, codon_count[common_codon] = count how many times the common_codon appears.
# MAKE THREE OPTIONS, 1 FOR LENGtzh, 1 FOR COMMON CODON, 1 FOR BOTH, and error handling in case neither

def translate_rna():
    '''
    Purpose of function: to translate RNA sequence into protein sequence.
    Inputs: RNA_code, optional arguments = 'l' for protein length, 'c' for common codons, or 'b' for both.
    Output: Outputs the translated protein sequence, the length of the protein sequence, and/or the most common occurring codons, and how many times they occur.
    '''
    # first, user enter RNA code:
    rna_code = input("Enter the RNA sequence you would like to translate: ")
    # define RNA codons for translating.... i had to look this up... hopefully it's all correct
    codon_dict = {
        'UUU': 'F', 'UUC': 'F', 'UUA': 'L', 'UUG': 'L',
        'CUU': 'L', 'CUC': 'L', 'CUA': 'L', 'CUG': 'L',
        'AUU': 'I', 'AUC': 'I', 'AUA': 'I', 'AUG': 'M',
        'GUU': 'V', 'GUC': 'V', 'GUA': 'V', 'GUG': 'V',
        'UCU': 'S', 'UCC': 'S', 'UCA': 'S', 'UCG': 'S',
        'CCU': 'P', 'CCC': 'P', 'CCA': 'P', 'CCG': 'P',
        'ACU': 'T', 'ACC': 'T', 'ACA': 'T', 'ACG': 'T',
        'GCU': 'A', 'GCC': 'A', 'GCA': 'A', 'GCG': 'A',
        'UAU': 'Y', 'UAC': 'Y', 'CAU': 'H', 'CAC': 'H',
        'CAA': 'Q', 'CAG': 'Q', 'AAU': 'N', 'AAC': 'N',
        'AAA': 'K', 'AAG': 'K', 'GAU': 'D', 'GAC': 'D',
        'GAA': 'E', 'GAG': 'E', 'UGU': 'C', 'UGC': 'C',
        'UGG': 'W', 'CGU': 'R', 'CGC': 'R', 'CGA': 'R', 'CGG': 'R',
        'AGU': 'S', 'AGC': 'S', 'AGA': 'R', 'AGG': 'R',
        'GGU': 'G', 'GGC': 'G', 'GGA': 'G', 'GGG': 'G'
    }

    # Initialize the protein and the codon count, so it will be filled in the for loops below, and will be used for the optional arguments (codon_count)
    protein = ''
    codon_count = {}

    # for i in range 0 --> length of RNA, step +3:
    for i in range(0, len(rna_code), 3):
        # Codons = RNA code from the first element, then step 3
        codon = rna_code[i:i+3]
        # make sure the codon has three elements or else it's not complete
        if len(codon) == 3:
            # then the amino acid = get value from codon table dict
            amino_acid = codon_dict.get(codon, '')
            # protein = amino acid ? I think? for printing the length
            if amino_acid:
                protein += amino_acid
            # add to list of codons
            if codon in codon_count:
                codon_count[codon] += 1
            # if specification is not met, then don't add it.
            else:
                codon_count[codon] = 1

    # To display the protein translated before asking about the optional arguments:
    print("______________________________________________")
    print("Translated Protein:", protein)
    print("______________________________________________")

    # optional arguments:
    length_or_common_codon = input("Would you like to see the length of the protein, the most commonly occurring codon, or both?: ('l' for length, 'c' for common, or 'b' for both)")

    # if user enters 'l', then return the len(protein) using the str printing format:
    if length_or_common_codon == 'l':
        print("______________________________________________")
        print(f"Length of encoded protein: {len(protein)}")
        print("______________________________________________")

    # if users chooses 'c', then print the max of codon_count (most common codon), using the key=codon_count.get = get = to get the codon and print it
    elif length_or_common_codon == 'c':
        common_codon = max(codon_count, key=codon_count.get)
        # print the common codon from the codon list, then codon_count[common_codon] to find and print how many times it appears in the sequence. Then, print using the str printing format.
        print("______________________________________________")
        print(f"Most commonly occurring codon: {common_codon} ({codon_count[common_codon]} times)")
        print("______________________________________________")

    # if user enters 'b', then do both:
    elif length_or_common_codon == 'b':
        print("______________________________________________")
        print(f"Length of encoded protein: {len(protein)}")
        common_codon = max(codon_count, key=codon_count.get)
        print(f"Most commonly occurring codon: {common_codon} ({codon_count[common_codon]} times)")
        print("______________________________________________")

    # if the user enters anything else, then the choice is invalid.
    else:
        print("Invalid choice.")
        return

"""MAIN"""

while True:
  # for user to chose the program
  program_choice = input("Enter the program you would like to run: ('c' for card dictionary or 'r' for RNA translation: )")

  # in case user enters an invalid program choice
  if program_choice != 'c' and program_choice != 'r':
    print("Invalid choice. Please try again. ")
    continue

  # FOR CARD DICTIONARY:
  elif program_choice == 'c':
    while True:
      card_dicts()
      run_cards = input("Run again? ('y/n'):")
      if card_dicts != 'y':
        break

  # FOR RNA TRANSLATION:
  elif program_choice == 'r':
    while True:
      translate_rna()
      run_rna = input("Run again? ('y/n'): ")
      if run_rna != 'y':
        break

  # invlaid choice
  else:
    print("invalid choice. Please try again. /n")
    continue

# run program again (while loop)
  run_program_again = input("Would you like to run the program again? ('y' for yes, 'stop' to exit): ")
  if run_program_again != 'y':
    break